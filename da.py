# -*- coding: utf-8 -*-
"""DA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EpTehyDiDq-BtxBJOaC4S4uJXPyjD2yS
"""

## data -> information -> knowledge

import pandas as pd

# Sample raw tweet data
data = {
    'tweet_id': [1, 2, 3, 4, 5],
    'tweet': [
        "love the new Spiderverse movie! #film",
        "Login successful at 10:04 PM",
        "That novel blew my mind! #novel",
        "This internship is life-changing #internship",
        "Totally wasted my time on that film... #film"
    ]
}

df = pd.DataFrame(data)
print(df)

"""- Raw tweet data (DATA stage)

Next step: Let’s filter tweets that contain relevant hashtags to get INFORMATION
"""

# Filter tweets that contain relevant hashtags: #film, #novel, #internship
hashtags = ['#film', '#novel']
df_info = df[df['tweet'].str.contains('|'.join(hashtags), case=False)]
df_info.reset_index(drop=True, inplace=True)
df_info

"""- We’ve filtered the tweets to only include those with relevant hashtags — this is the INFORMATION stage:

Next: Let’s perform basic sentiment classification (KNOWLEDGE stage) — assigning 1 for positive, 0 for negative based on keywords.
"""

# Define simple sentiment keywords for demo
positive_keywords = ['love', 'amazing', 'great', 'life-changing', 'blew my mind']
negative_keywords = ['waste', 'wasted', 'bad', 'terrible', 'hate']

def get_sentiment(tweet):
    tweet_lower = tweet.lower()
    if any(word in tweet_lower for word in positive_keywords):
        return 1  # Positive
    elif any(word in tweet_lower for word in negative_keywords):
        return 0  # Negative
    else:
        return None  # Neutral/undefined for this demo

# Apply sentiment analysis
df_info['sentiment'] = df_info['tweet'].apply(get_sentiment)
df_info

